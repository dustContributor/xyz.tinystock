/*
 * This file is generated by jOOQ.
*/
package xyz.tinystock.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import xyz.tinystock.database.Indexes;
import xyz.tinystock.database.Keys;
import xyz.tinystock.database.Stockdb;
import xyz.tinystock.database.tables.records.OrderRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = -916656273;

    /**
     * The reference instance of <code>stockdb.ORDER</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>stockdb.ORDER.ID</code>.
     */
    public final TableField<OrderRecord, UInteger> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>stockdb.ORDER.CREATED_DATE</code>.
     */
    public final TableField<OrderRecord, Timestamp> CREATED_DATE = createField("CREATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>stockdb.ORDER.DELIVERED_DATE</code>.
     */
    public final TableField<OrderRecord, Timestamp> DELIVERED_DATE = createField("DELIVERED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>stockdb.ORDER.COMMENT</code>.
     */
    public final TableField<OrderRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>stockdb.ORDER.COMPLAINT</code>.
     */
    public final TableField<OrderRecord, String> COMPLAINT = createField("COMPLAINT", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>stockdb.ORDER.ID_STATE</code>.
     */
    public final TableField<OrderRecord, UInteger> ID_STATE = createField("ID_STATE", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>stockdb.ORDER.ID_CUSTOMER</code>.
     */
    public final TableField<OrderRecord, UInteger> ID_CUSTOMER = createField("ID_CUSTOMER", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>stockdb.ORDER</code> table reference
     */
    public Order() {
        this(DSL.name("ORDER"), null);
    }

    /**
     * Create an aliased <code>stockdb.ORDER</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>stockdb.ORDER</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stockdb.STOCKDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_ORDER_CUSTOMER_FK, Indexes.ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.KEY_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderRecord, ?>>asList(Keys.ORDER_CUSTOMER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }
}
