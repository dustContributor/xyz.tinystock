/*
 * This file is generated by jOOQ.
 */
package xyz.tinystock.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import xyz.tinystock.database.Indexes;
import xyz.tinystock.database.Keys;
import xyz.tinystock.database.Stockdb;
import xyz.tinystock.database.tables.records.ComponentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Component extends TableImpl<ComponentRecord> {

    private static final long serialVersionUID = -1427187444;

    /**
     * The reference instance of <code>stockdb.COMPONENT</code>
     */
    public static final Component COMPONENT = new Component();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentRecord> getRecordType() {
        return ComponentRecord.class;
    }

    /**
     * The column <code>stockdb.COMPONENT.ID</code>.
     */
    public final TableField<ComponentRecord, UInteger> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>stockdb.COMPONENT.CODE</code>.
     */
    public final TableField<ComponentRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>stockdb.COMPONENT.DESCRIPTION</code>.
     */
    public final TableField<ComponentRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>stockdb.COMPONENT.PRICE</code>.
     */
    public final TableField<ComponentRecord, UInteger> PRICE = createField("PRICE", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>stockdb.COMPONENT</code> table reference
     */
    public Component() {
        this(DSL.name("COMPONENT"), null);
    }

    /**
     * Create an aliased <code>stockdb.COMPONENT</code> table reference
     */
    public Component(String alias) {
        this(DSL.name(alias), COMPONENT);
    }

    /**
     * Create an aliased <code>stockdb.COMPONENT</code> table reference
     */
    public Component(Name alias) {
        this(alias, COMPONENT);
    }

    private Component(Name alias, Table<ComponentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Component(Name alias, Table<ComponentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Component(Table<O> child, ForeignKey<O, ComponentRecord> key) {
        super(child, key, COMPONENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Stockdb.STOCKDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPONENT_COMPONENT_UN, Indexes.COMPONENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ComponentRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_COMPONENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ComponentRecord> getPrimaryKey() {
        return Keys.KEY_COMPONENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ComponentRecord>> getKeys() {
        return Arrays.<UniqueKey<ComponentRecord>>asList(Keys.KEY_COMPONENT_PRIMARY, Keys.KEY_COMPONENT_COMPONENT_UN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Component as(String alias) {
        return new Component(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Component as(Name alias) {
        return new Component(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(String name) {
        return new Component(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(Name name) {
        return new Component(name, null);
    }
}
